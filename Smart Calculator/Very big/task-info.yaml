type: edu
custom_name: stage8
files:
- name: test/Test.java
  visible: false
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.*;
    import java.util.regex.Pattern;

    public class Main {

        public static final String COMMAND_REGEX = "/\\w+";
        public static final String ASSIGNMENT_DELIMITER_REGEX = "\\s*=\\s*";
        public static final String LATIN_LETTERS_REGEX = "[A-Za-z]+";
        public static final String NUMBERS_REGEX = "-?+[\\d]+";
        public static final String EXPRESSION_REGEX = "((-*)|(\\+*)|([a-zA-Z0-9])|(\\s*))+";
        public static final String EXIT_COMMAND = "/exit";
        public static final String HELP_COMMAND = "/help";
        public static final String EMPTY_STRING = "";
        public static final Map<String, Integer> PRIORITIES =
                Map.of("(", 0, "+", 1, "-", 1, ")", 1, "*", 2, "/", 2, "^", 3);

        public static Map<String, Integer> variablesMap = new HashMap<>();


        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine().trim();

            while (!EXIT_COMMAND.equals(input)) {
                if (input.matches(COMMAND_REGEX)) {
                    String statement = getCommandStatement(input);
                    System.out.println(statement);
                } else if (isValidVariableAssignment(input)) {
                    updateTheMap(input);
                } else if (input.matches(LATIN_LETTERS_REGEX)) {
                    System.out.println(variablesMap.containsKey(input) ? variablesMap.get(input) : "Unknown variable");
                } else if (!EMPTY_STRING.equals(input) && input.matches(EXPRESSION_REGEX)) {
                    try {
                        int sum = calculateSum(input);
                        System.out.println(sum);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid expression");
                    }
                } else if (isExpressionWithOperators(input) && isValidExpression(input)) {
                    String[] members = cleanupInput(input);
                    boolean hasValidParentheses = validateParentheses(members);
                    if (!hasValidParentheses) {
                        System.out.println("Invalid expression");
                    } else {
                        String postfix = convertToPostfix(members);
                        String[] postfixWithValues = substituteValues(postfix);
                        int result = calculateExpression(postfixWithValues);
                        System.out.println(result);
                    }
                } else if ("".equals(input)) {

                } else {
                    System.out.println("Invalid expression");
                }
                input = scanner.nextLine().trim();
            }
            System.out.println("Bye!");
        }

        private static boolean validateParentheses(String[] members) {
            int openingCounter = 0;
            int closingCounter = 0;
            for (String member : members) {
                if (member.equals("(")) {
                    openingCounter += 1;
                }
                if (member.equals(")")) {
                    closingCounter += 1;
                }
                if (openingCounter == 0 && closingCounter > 0) {
                    return false;
                }
            }
            return openingCounter == closingCounter;
        }


        private static String getCommandStatement(String input) {
            return HELP_COMMAND.equals(input) ? "The program calculates the sum of numbers." +
                    "It supports addition, subtraction, division and multiplication." : "Unknown command";
        }

        private static boolean isValidVariableAssignment(String input) {
            boolean isValid = false;
            if (input.contains("=")) {
                String[] variables = input.trim().split(ASSIGNMENT_DELIMITER_REGEX);
                String name = variables[0];
                String nameOrValue = variables[1];
                if (variables.length == 2) {
                    if (name.matches(LATIN_LETTERS_REGEX)) {
                        if (nameOrValue.matches(NUMBERS_REGEX) || nameOrValue.matches(LATIN_LETTERS_REGEX)) {
                            isValid = true;
                        } else {
                            System.out.println("Invalid identifier");
                        }
                    } else {
                        System.out.println("Invalid identifier");
                    }
                } else {
                    System.out.println("Invalid assignment");
                }
            }
            return isValid;
        }

        private static void updateTheMap(String input) {
            String[] variables = input.trim().split(ASSIGNMENT_DELIMITER_REGEX);
            String name = variables[0].trim();
            String value = variables[1].trim();

            if (value.matches(NUMBERS_REGEX)) {
                variablesMap.put(name, Integer.parseInt(value));
            }
            if (value.matches(LATIN_LETTERS_REGEX)) {
                if (variablesMap.containsKey(value)) {
                    variablesMap.put(name, variablesMap.get(value));
                } else {
                    System.out.println("Unknown variable");
                }
            }
        }

        private static int calculateSum(String input) {
            String[] numbers = input.trim().replaceAll(" {2,}", " ").split(" ");
            int sum = 0;
            int sign = 1;
            for (String token : numbers) {
                int value;
                if (token.matches(LATIN_LETTERS_REGEX)) {
                    value = resolveTheValue(token);
                    sum += sign * value;
                } else if (token.matches(NUMBERS_REGEX)) {
                    value = Integer.parseInt(token);
                    sum += sign * value;
                } else {
                    sign = determineSign(token);
                }
            }
            return sum;
        }

        private static int resolveTheValue(String number) {
            return variablesMap.get(number) != null ? Integer.parseInt(variablesMap.get(number).toString()) : 0;
        }

        private static int determineSign(String number) {
            int sign = 1;
            if (number.matches("-")) {
                sign = -1;
            } else if (number.matches("-+") && number.length() % 2 != 0) {
                sign = -1;
            }
            return sign;
        }

        private static boolean isExpressionWithOperators(String input) {
            Pattern operatorsPattern = Pattern.compile("[()/*^]");
            return operatorsPattern.matcher(input).find();
        }

        private static boolean isValidExpression(String input) {
            return !input.matches("(.*)((/{2,})|(\\*{2,})|(\\^{2,}))(.*)");
        }

        private static String convertToPostfix(String[] members) {
            Deque<String> stack = new ArrayDeque<>();
            StringBuilder result = new StringBuilder();
            for (String member : members) {
                if (member.matches(NUMBERS_REGEX)) {
                    result.append(member).append(" ");
                } else if (member.matches(LATIN_LETTERS_REGEX)) {
                    result.append(member).append(" ");
                } else if (member.matches("[-+/*^]")) {
                    if (!stack.isEmpty() && PRIORITIES.get(member) <= PRIORITIES.get(stack.peek())) {
                        String topOperand = stack.peek();
                        while (topOperand != null && PRIORITIES.get(member) <= PRIORITIES.get(topOperand)) {
                            result.append(topOperand).append(" ");
                            stack.poll();
                            topOperand = stack.peek();
                        }
                    }
                    stack.push(member);
                } else if ("(".equals(member)) {
                    stack.push(member);
                } else if (")".equals(member)) {
                    String temp = stack.poll();
                    while (!"(".equals(temp)) {
                        result.append(temp).append(" ");
                        temp = stack.poll();
                    }
                }
            }
            while (!stack.isEmpty()) {
                String operator = stack.poll();
                if (operator.matches("[()]")) {
                    result = new StringBuilder("Unbalanced parentheses");
                    break;
                } else {
                    result.append(operator).append(" ");
                }
            }
            return result.toString().trim();
        }

        private static String[] cleanupInput(String input) {
            input = removeExtraPluses(input);
            input = removeExtraMinuses(input);
            return splitTheData(input);
        }

        private static String removeExtraPluses(String input) {
            return input.trim().replaceAll("\\+{2,}", "+");
        }

        private static String removeExtraMinuses(String input) {
            String cleanedUpMinuses = input;
            int start = input.indexOf("--");
            while (start != -1) {
                int counter = 2;
                for (int i = start + 2; i < input.length(); i++) {
                    if (input.charAt(i) == '-') {
                        counter += 1;
                    } else {
                        if (counter % 2 == 0) {
                            cleanedUpMinuses = input.replaceFirst("-{2,}", "+");
                        } else {
                            cleanedUpMinuses = input.replaceFirst("-{2,}", "-");
                        }
                        counter = 0;
                    }
                    start = cleanedUpMinuses.indexOf("--");
                }
            }
            return cleanedUpMinuses;
        }

        private static String[] splitTheData(String input) {
            String[] members = input.trim().replaceAll(" ", "").split("");
            Deque<String> stack = new ArrayDeque<>();
            StringBuilder sb = new StringBuilder();
            String previous = "";
            String current;
            for (String member : members) {
                current = member;
                if (current.matches(LATIN_LETTERS_REGEX)) {
                    if (previous.matches(LATIN_LETTERS_REGEX)) {
                        sb.append(current);
                    } else {
                        sb = new StringBuilder(current);
                    }
                } else if (current.matches(NUMBERS_REGEX)) {
                    if (previous.matches(NUMBERS_REGEX)) {
                        sb.append(current);
                    } else {
                        sb = new StringBuilder(current);
                    }
                } else {
                    if (previous.matches(LATIN_LETTERS_REGEX) || previous.matches(NUMBERS_REGEX)) {
                        stack.push(sb.toString());
                        sb = new StringBuilder();
                    }
                    stack.push(current);
                }
                previous = current;
            }
            if (!"".equals(sb.toString())) {
                stack.push(sb.toString());
            }
            Iterator<String> iterator = stack.descendingIterator();
            String[] output = new String[stack.size()];
            for (int i = 0; i < stack.size(); i++) {
                output[i] = iterator.next();
            }
            return output;
        }

        private static String[] substituteValues(String postfixNotation) {
            String[] postfix = postfixNotation.trim().split(" ");
            String[] postfixWithValues = new String[postfix.length];
            for (int i = 0; i < postfix.length; i++) {
                if (postfix[i].matches(LATIN_LETTERS_REGEX)) {
                    postfixWithValues[i] = String.valueOf(resolveTheValue(postfix[i]));
                } else {
                    postfixWithValues[i] = postfix[i];
                }
            }
            return postfixWithValues;
        }

        private static int calculateExpression(String[] input) {
            Deque<Integer> stack = new ArrayDeque<>();
            String current;
            int first;
            int second;
            for (String s : input) {
                current = s;
                if (current.matches(NUMBERS_REGEX)) {
                    stack.push(Integer.parseInt(current));
                } else {
                    first = stack.pop();
                    second = stack.pop();
                    switch (current) {
                        case "+":
                            stack.push(first + second);
                            break;
                        case "-":
                            stack.push(second - first);
                            break;
                        case "*":
                            stack.push(first * second);
                            break;
                        case "/":
                            stack.push(second / first);
                            break;
                        case "^":
                            stack.push((int) Math.pow(second, first));
                            break;
                    }
                }
            }
            return stack.pop();
        }
    }
  learner_created: true
- name: src/calculator/PostfixConverter.java
  visible: true
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  learner_created: true
- name: src/calculator/Type.java
  visible: true
  text: |
    package calculator;

    public enum Type {
        ASSIGNMENT, COMMAND, EMPTY, EXPRESSION, INVALID, NUMBER, VARIABLE
    }
  learner_created: true
- name: src/calculator/VariablesHandler.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;
    import java.util.Map;

    public class VariablesHandler {

        public static final String LATIN_LETTERS_REGEX = "[A-Za-z]+";
        public static final String NUMBERS_REGEX = "-?+[\\d]+";
        public static final String ASSIGNMENT_DELIMITER_REGEX = "\\s*=\\s*";
        public static final String UNKNOWN_VARIABLE = "Unknown variable";

        private static final Map<String, Integer> variablesMap = new HashMap<>();

        public void printVariable(String input) {
            System.out.println(variablesMap.containsKey(input) ? variablesMap.get(input) : UNKNOWN_VARIABLE);
        }

        public int resolveTheValue(String variableName) {
            return variablesMap.get(variableName) != null ? Integer.parseInt(variablesMap.get(variableName).toString()) : 0;
        }

        public String[] substituteValues(String[] postfix) {
            String[] postfixWithValues = new String[postfix.length];
            for (int i = 0; i < postfix.length; i++) {
                if (postfix[i].matches(LATIN_LETTERS_REGEX)) {
                    postfixWithValues[i] = String.valueOf(resolveTheValue(postfix[i]));
                } else {
                    postfixWithValues[i] = postfix[i];
                }
            }
            return postfixWithValues;
        }

        public void updateTheMap(String input) {
            String[] variables = input.trim().split(ASSIGNMENT_DELIMITER_REGEX);
            String name = variables[0].trim();
            String value = variables[1].trim();

            if (value.matches(NUMBERS_REGEX)) {
                variablesMap.put(name, Integer.parseInt(value));
            }
            if (value.matches(LATIN_LETTERS_REGEX)) {
                if (variablesMap.containsKey(value)) {
                    variablesMap.put(name, variablesMap.get(value));
                } else {
                    System.out.println(UNKNOWN_VARIABLE);
                }
            }
        }

    }
  learner_created: true
- name: src/calculator/Command.java
  visible: true
  text: |
    package calculator;

    public enum Command {
        EXIT("/exit", "Bye!", true),
        HELP("/help", "The program calculates the sum of numbers." +
                "It supports addition, subtraction, division and multiplication.", false),
        UNKNOWN("/unknown", "Unknown command", false);

        private final String command;
        private final String toPrint;
        private final boolean shouldExit;

        private Command(String command, String toPrint, boolean shouldExit) {
            this.command = command;
            this.toPrint = toPrint;
            this.shouldExit = shouldExit;
        }

        public static Command valueOfCommand(String command) {
            for (Command c : values()) {
                if (c.command.equals(command)) {
                    return c;
                }
            }
            return UNKNOWN;
        }

        public void printDescription() {
            System.out.println(this.toPrint);
        }

        public boolean shouldExit() {
            return this.shouldExit;
        }

    }
  learner_created: true
- name: src/calculator/ExpressionValidator.java
  visible: true
  text: |
    package calculator;



    public class ExpressionValidator {

        public static final String INVALID_IDENTIFIER = "Invalid identifier";
        public static final String INVALID_ASSIGNMENT = "Invalid assignment";
        public static final String INVALID_EXPRESSION = "Invalid expression";

        public static final String ASSIGNMENT_DELIMITER_REGEX = "\\s*=\\s*";
        public static final String LATIN_LETTERS_REGEX = "[A-Za-z]+";
        public static final String NUMBERS_REGEX = "-?+[\\d]+";

        public boolean isValid(String input, Type type) {
            switch(type){
                case ASSIGNMENT:
                    return isValidVariableAssignment(input);
                case EXPRESSION:
                    return validateParentheses(input) && isValidExpression(input);
            }
            return false;
        }

        private boolean isValidVariableAssignment(String input) {
            boolean isValid = false;
            if (input.contains("=")) {
                String[] variables = input.trim().split(ASSIGNMENT_DELIMITER_REGEX);
                String name = variables[0];
                String nameOrValue = variables[1];
                if (variables.length == 2) {
                    if (name.matches(LATIN_LETTERS_REGEX)) {
                        if (nameOrValue.matches(NUMBERS_REGEX) || nameOrValue.matches(LATIN_LETTERS_REGEX)) {
                            isValid = true;
                        } else {
                            System.out.println(INVALID_IDENTIFIER);
                        }
                    } else {
                        System.out.println(INVALID_IDENTIFIER);
                    }
                } else {
                    System.out.println(INVALID_ASSIGNMENT);
                }
            } else {
                isValid = true;
            }
            return isValid;
        }

        private boolean validateParentheses(String input) {
            int openingCounter = 0;
            int closingCounter = 0;
            boolean hasValidParentheses = true;
            String current;
            for (int i = 0; i < input.length(); i++) {
                current = String.valueOf(input.charAt(i));
                if ("(".equals(current)) {
                    openingCounter += 1;
                }
                if (")".equals(current)) {
                    closingCounter += 1;
                }
                if (openingCounter == 0 && closingCounter > 0) {
                    hasValidParentheses = false;
                    System.out.println(INVALID_EXPRESSION);
                }
            }
            if (openingCounter != closingCounter) {
                hasValidParentheses = false;
                System.out.println(INVALID_EXPRESSION);
            }
            return hasValidParentheses;
        }

        private boolean isValidExpression(String input) {
            boolean isValidExpression = !input.matches("(.*)((/{2,})|(\\*{2,})|(\\^{2,}))(.*)");
            if (!isValidExpression) {
                System.out.println(INVALID_EXPRESSION);
            }
            return isValidExpression;
        }
    }
  learner_created: true
- name: src/calculator/TypeResolver.java
  visible: true
  text: |
    package calculator;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class TypeResolver {

        public Type resolve(String input) {
            if (isAssignment(input)) {
                return Type.ASSIGNMENT;
            } else if (isCommand(input)) {
                return Type.COMMAND;
            } else if (isEmpty(input)) {
                return Type.EMPTY;
            } else if (isExpression(input)) {
                return Type.EXPRESSION;
            } else if (isNumber(input)) {
                return Type.NUMBER;
            } else if (isVariable(input)) {
                return Type.VARIABLE;
            } else {
                return Type.INVALID;
            }
        }

        private boolean isAssignment(String input) {
            return input.contains("=");
        }

        private boolean isCommand(String input) {
            return input.matches("/\\w+");
        }

        private boolean isEmpty(String input) {
            return "".equals(input);
        }

        private boolean isExpression(String input) {
            Pattern pattern = Pattern.compile("[-+/^*]");
            Matcher matcher = pattern.matcher(input);
            return matcher.find();
        }

        private boolean isNumber(String input) {
            return input.matches("-?+[\\d]+");
        }

        private boolean isVariable(String input) {
            return input.matches("[A-Za-z]+");
        }
    }
  learner_created: true
- name: src/calculator/ExpressionSimplifier.java
  visible: true
  text: |
    package calculator;

    import java.util.ArrayDeque;
    import java.util.Deque;
    import java.util.Iterator;

    public class ExpressionSimplifier {

        public static final String MULTIPLE_PLUS_REGEX = "\\+{2,}";
        public static final String MULTIPLE_MINUS_REGEX = "-{2,}";
        public static final String PLUS = "+";
        public static final String MINUS = "-";
        public static final String DOUBLE_MINUS = "--";

        public static final String LATIN_LETTERS_REGEX = "[A-Za-z]+";
        public static final String NUMBERS_REGEX = "-?+[\\d]+";


        public String[] simplify(String input) {
            input = removeExtraPluses(input);
            input = removeExtraMinuses(input);
            return splitTheData(input);
        }

        private String removeExtraPluses(String input) {
            return input.trim().replaceAll(MULTIPLE_PLUS_REGEX, PLUS);
        }

        private String removeExtraMinuses(String input) {
            String cleanedUpMinuses = input;
            int start = input.indexOf(DOUBLE_MINUS);
            int index = start;
            int counter = 0;
            while (start != -1) {
                if (cleanedUpMinuses.charAt(index) == '-') {
                    counter += 1;
                    index += 1;
                } else {
                    if (counter % 2 == 0) {
                        cleanedUpMinuses = cleanedUpMinuses.replaceFirst(MULTIPLE_MINUS_REGEX, PLUS);
                    } else {
                        cleanedUpMinuses = cleanedUpMinuses.replaceFirst(MULTIPLE_MINUS_REGEX, MINUS);
                    }
                    counter = 0;
                    start = cleanedUpMinuses.indexOf(DOUBLE_MINUS);
                    index = start;
                }
            }
            return cleanedUpMinuses;
        }

        private String[] splitTheData(String input) {
            String[] members = input.trim().replaceAll(" ", "").split("");
            Deque<String> stack = new ArrayDeque<>();
            StringBuilder sb = new StringBuilder();
            String previous = "";
            String current;
            for (String member : members) {
                current = member;
                if (isLetter(current)) {
                    if (isLetter(previous)) {
                        sb.append(current);
                    } else {
                        sb = new StringBuilder(current);
                    }
                } else if (isNumber(current)) {
                    if (isNumber(previous)) {
                        sb.append(current);
                    } else {
                        sb = new StringBuilder(current);
                    }
                } else {
                    if (isLetter(previous) || isNumber(previous)) {
                        stack.push(sb.toString());
                        sb = new StringBuilder();
                    }
                    stack.push(current);
                }
                previous = current;
            }
            if (!"".equals(sb.toString())) {
                stack.push(sb.toString());
            }
            Iterator<String> iterator = stack.descendingIterator();
            String[] output = new String[stack.size()];
            for (int i = 0; i < stack.size(); i++) {
                output[i] = iterator.next();
            }
            return output;
        }

        private boolean isLetter(String current) {
            return current.matches(LATIN_LETTERS_REGEX);
        }

        private boolean isNumber(String current) {
            return current.matches(NUMBERS_REGEX);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/227/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/42/stages/227/implement">JetBrains
    Academy</a>
  time: Sat, 15 Aug 2020 18:36:48 UTC
record: 8
